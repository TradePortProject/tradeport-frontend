name: "CI - Stage 3 - DAST (OWASP ZAP Scan)"

# ======================================================
# Dynamic Application Security Testing Workflow - Stage 3
# ======================================================
# This workflow performs dynamic security testing (DAST) 
# on the running Tradeport frontend application using 
# OWASP ZAP security scanner.
#
# Key Features:
# - Builds the application in production mode
# - Starts a local server to host the application
# - Runs OWASP ZAP scanner against the running instance
# - Generates an HTML security report
#
# The workflow runs on pull requests to main and can
# be manually triggered.
# ======================================================

on:
  push:
    branches: [main, "feature/**"]

  pull_request:
    branches: [main]  # Run on PRs targeting main branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: 🏗️ Build Vite Frontend
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code  # Get the latest code from the repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js  # Configure Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"  # Use Node.js 20
          cache: "npm"        # Enable npm dependency caching

      - name: 📦 Install Dependencies  # Install project dependencies
        run: npm ci

      - name: ⚙️ Build Frontend  # Build the application in production mode
        run: npm run build:prod

      - name: ⬆️ Upload Built Frontend  # Save build files for the DAST scan
        uses: actions/upload-artifact@v4
        with:
          name: dist         # Artifact name for the build output
          path: dist/        # Location of built files
          
  dast-scan:
    name: ☣️ OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: build  # Run after the build job completes
    steps:
      - name: 📥 Checkout Code  # Get the latest code from the repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js  # Configure Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"  # Use Node.js 20
          cache: "npm"        # Enable npm dependency caching

      - name: 📦 Install Dependencies  # Install project dependencies
        run: npm ci

      - name: ⚙️ Build Frontend  # Build the application in production mode
        run: npm run build:prod

      - name: 🚀 Serve App Locally (Vite Preview)
        run: |
          nohup npm run preview -- --port 4173 &
          sleep 10

      - name: 🧪 Confirm App is Running  # Verify the app is accessible
        run: curl -I http://localhost:4173 || exit 1  # Check HTTP response

      - name: ☣️ Run OWASP ZAP Scan  # Run security scan against the running app
        run: |
          docker run --network host \
            --user root \
            -v "${{ github.workspace }}:/zap/wrk/:rw" \
            -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://localhost:4173 \
            -g gen.conf \
            -r zap_baseline_report.html \
            --exitcode 0  # ✅ Don't fail the workflow on warnings

      - name: 📤 Upload ZAP Report  # Save scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report  # Artifact name for the ZAP report
          path: zap_baseline_report.html  # Path to the HTML report
