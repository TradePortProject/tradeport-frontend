name: "CI - Stage 2 - Security Scan - SAST & SCA"

# ======================================================
# Security Scanning Workflow - Stage 2
# ======================================================
# This workflow performs comprehensive security scanning 
# of the Tradeport Frontend codebase using multiple tools:
#
# 1. SCA (Software Composition Analysis):
#    - npm audit: Scans dependencies for known vulnerabilities
#    - OWASP Dependency Check: Identifies vulnerable components
#
# 2. SAST (Static Application Security Testing):
#    - CodeQL: Analyzes code for security weaknesses
#
# The workflow runs on pull requests to main and can be
# manually triggered via workflow_dispatch.
# ======================================================

on:
  push:
    branches: [main, "feature/**"]  # Uncomment to run on push to these branches
  pull_request:
    branches: [main]  # Run on PRs targeting main branch
  workflow_dispatch:  # Allow manual triggering

# Prevent concurrent workflow runs for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Cancel in-progress runs when a new workflow is triggered

jobs:
  setup:
    name: üìê Security Scan Setup
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-nodemodules.outputs.cache-hit }}  # Export cache hit status
    steps:
      - name: Checkout code  # Get the latest code from the repository
        uses: actions/checkout@v4

      - name: Setup Node.js  # Configure Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20.x  # Use Node.js 20
          cache: "npm"        # Enable npm dependency caching

      - name: Cache node_modules  # Cache dependencies to speed up builds
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}  # Cache key based on package-lock.json

      - name: Install Dependencies  # Install only if cache was not restored
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps  # Clean install with legacy peer deps support for security scanning

  npm-audit:
    name: üß™ SCA - npm Audit
    runs-on: ubuntu-latest
    needs: setup  # Depends on setup job completing
    steps:
      - uses: actions/checkout@v4  # Get the latest code
      - uses: actions/setup-node@v4  # Set up Node.js
        with:
          node-version: 20.x  # Use Node.js 20
          cache: "npm"        # Enable npm dependency caching
      - run: npm ci --prefer-offline --no-audit  # Install dependencies without running audit yet
      
      - name: Run npm audit  # Run security audit of dependencies
        run: npm audit --json > npm-audit.json || true  # Output in JSON format, continue on failure
      
      - name: Detect High Severity  # Identify high severity vulnerabilities
        run: |
          if grep -q '"severity":"high"' ./npm-audit.json; then
            echo "‚ö†Ô∏è High severity vulnerabilities found"
          fi
      
      - name: Upload npm audit report  # Save audit results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit.json
          retention-days: 7  # Keep report for 7 days

  owasp-sca:
    name: üß™ SCA - OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: setup  # Depends on setup job completing
    steps:
      - uses: actions/checkout@v4  # Get the latest code
      
      - name: Download OWASP Dependency Check  # Get OWASP scanning tool
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v7.2.0/dependency-check-7.2.0-release.zip
          unzip dependency-check-7.2.0-release.zip
      
      - name: Run OWASP Scan  # Scan dependencies for known vulnerabilities
        run: |
          # Run scan against entire project, output as XML and save to log file
          dependency-check/bin/dependency-check.sh --project "TradePort" --scan . --format XML --out odc-report.xml | tee ODC-report || true
      
      - name: Check for CRITICAL vulnerabilities  # Fail build on critical issues
        run: |
          if grep -q "CRITICAL" ./ODC-report; then
            echo "üö® Critical vulnerabilities found"
            grep "CRITICAL" ./ODC-report
            exit 1  # Fail the workflow if critical vulnerabilities are found
          fi
      
      - name: Upload OWASP reports  # Save scan results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: |
            ODC-report
            odc-report.xml
          retention-days: 7  # Keep reports for 7 days

  codeql-sast:
    name: ‚ò¢Ô∏è SAST - CodeQL Analysis
    runs-on: ubuntu-latest
    needs: setup  # Depends on setup job completing
    permissions:
      actions: read        # Permission to read workflows
      contents: read       # Permission to read repository contents
      security-events: write  # Permission to write security events
    steps:
      - name: Checkout repository  # Get the latest code
        uses: actions/checkout@v4

      - name: Initialize CodeQL  # Set up CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript  # Analyze JavaScript code (add typescript if needed)

      - name: Autobuild  # Automatically build JavaScript/TypeScript projects
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis  # Run static code analysis
        uses: github/codeql-action/analyze@v3  # Identify potential security vulnerabilities

  archive:
    name: üì¶ Final Security Archive
    runs-on: ubuntu-latest
    needs: [npm-audit, owasp-sca, codeql-sast]  # Run after all security scans complete
    steps:
      - name: ‚úÖ Security scan summary  # Provide a summary of all security scans
        run: echo "npm audit, OWASP scan, and CodeQL completed."  # Simple completion message
