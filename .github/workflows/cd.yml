name: CD - Stage 1 - Deploy to DigitalOcean Droplet

on:
  push:
    branches: [main, develop, "feature/**"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  DOCKERHUB_IMAGE_FRONTEND: sreerajrone/tradeport-frontend
  REMOTE_DIR: /root/tradeport

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Map branch to environment
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'staging') || 'dev' }}

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Determine version
        id: version
        run: |
          VERSION=$(grep '"version"' ./package.json | cut -d'"' -f4 || echo ${GITHUB_SHA::8})
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "ENV_NAME=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'staging') || 'dev' }}" >> $GITHUB_ENV

      - name: üîê Inject environment variables
        run: |
          # Fix the path to create .env.production in the right location
          echo "VITE_API_URL=${{ secrets.VITE_API_URL || 'http://backend:3000/api' }}" > ./.env.production

      - name: üê≥ Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: üê≥ Build and tag Frontend Image
        run: |
          # Use a production Dockerfile or fallback to dev if necessary
          DOCKERFILE=./Dockerfile
          if [ ! -f "$DOCKERFILE" ]; then
            DOCKERFILE=./Dockerfile.dev
          fi

          # Build with multiple tags
          docker build -t $DOCKERHUB_IMAGE_FRONTEND:latest \
                      -t $DOCKERHUB_IMAGE_FRONTEND:$VERSION \
                      -t $DOCKERHUB_IMAGE_FRONTEND:$SHORT_SHA \
                      -t $DOCKERHUB_IMAGE_FRONTEND:$ENV_NAME \
                      -f $DOCKERFILE .

      - name: üê≥ Push Frontend Image to Docker Hub
        run: |
          # Add missing push for ENV_NAME tag
          docker push $DOCKERHUB_IMAGE_FRONTEND:latest
          docker push $DOCKERHUB_IMAGE_FRONTEND:$VERSION
          docker push $DOCKERHUB_IMAGE_FRONTEND:$SHORT_SHA
          docker push $DOCKERHUB_IMAGE_FRONTEND:$ENV_NAME

      - name: üîç Verify Docker Hub Push
        run: |
          # Add a simple verification that the push succeeded
          echo "Verifying image push to Docker Hub..."
          docker pull $DOCKERHUB_IMAGE_FRONTEND:latest && \
            echo "‚úÖ Successfully verified image push to Docker Hub" || \
            (echo "‚ùå Failed to verify image on Docker Hub" && exit 1)

      - name: üîç Health check
        run: |
          # Wait for deployment to stabilize
          sleep 20
          # Check if the frontend is responding
          curl -m 10 -sSf http://${{ secrets.DROPLET_IP }}:3001/health || curl -m 10 -sSf http://${{ secrets.DROPLET_IP }}:3001 || echo "Frontend may still be starting up, please verify manually"
